const TreeNode = (val = 0, left = null, right = null) => ({
  val,
  left,
  right,
})

const arrayToTree = (arr) => {
  if (!arr.length) return null

  const root = TreeNode(arr[0])
  const queue = [root]
  let i = 1

  while (i < arr.length) {
    const current = queue.shift()

    if (arr[i] !== null) {
      current.left = TreeNode(arr[i])
      queue.push(current.left)
    }

    i++

    if (i < arr.length && arr[i] !== null) {
      current.right = TreeNode(arr[i])
      queue.push(current.right)
    }

    i++
  }

  return root
}

const treeToArray = (root) => {
  if (!root) return []

  const queue = [root]
  const result = []

  while (queue.length) {
    const current = queue.shift()

    if (current) {
      result.push(current.val)
      queue.push(current.left)
      queue.push(current.right)
    } else {
      result.push(null)
    }
  }

  while (result[result.length - 1] === null) {
    result.pop()
  }

  return result
}

module.exports = { TreeNode, arrayToTree, treeToArray }
